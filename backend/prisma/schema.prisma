generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  userName       String
  email          String
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profilePicture String
  about          String
  dateOfBirth    DateTime
  artist         Followers[]
  history        History[]
  likedSongs     Likes[]
  ownedPlaylists Playlist[]
  useralbums     useralbums[]
  userplaylists  userplaylists[]

  @@map("users")
}

model Artist {
  id                String        @id @default(uuid())
  name              String
  about             String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  profilePicture    String
  numberOfFollowers Int
  albums            Album[]
  artistsongs       artistsongs[]
  followers         Followers[]

  @@map("artists")
}

model Followers {
  id        String   @id @default(uuid())
  userId    String
  artistId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    Artist   @relation(fields: [artistId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([artistId], map: "followers_artistId_fkey")
  @@index([userId], map: "followers_userId_fkey")
  @@map("followers")
}

model Album {
  id          String       @id @default(uuid())
  name        String
  artistId    String
  description String
  image       String
  releaseDate DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  artist      Artist       @relation(fields: [artistId], references: [id])
  song        Song[]
  useralbums  useralbums[]

  @@index([artistId], map: "albums_artistId_fkey")
  @@map("albums")
}

model Song {
  id            String          @id @default(uuid())
  name          String
  duration      Int
  AlbumId       String
  description   String
  contentURL    String
  numberOfLikes Int
  releaseDate   DateTime
  filePath      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cover        String

  artistsongs   artistsongs[]
  likedBy       Likes[]
  playlistsongs playlistsongs[]
  songgenres    songgenres[]
  songhistories songhistories[]
  songmoods     songmoods[]
  album         Album           @relation(fields: [AlbumId], references: [id])

  @@index([AlbumId], map: "songs_AlbumId_fkey")
  @@map("songs")
}

model Playlist {
  id            String          @id @default(uuid())
  name          String
  image         String
  userId        String
  description   String
  songCount     Int
  isPublic      Boolean
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  playlistsongs playlistsongs[]
  userplaylists userplaylists[]

  @@index([userId], map: "playlists_userId_fkey")
  @@map("playlists")
}

model Likes {
  id        String   @id @default(uuid())
  userId    String
  songId    String
  CreatedAt DateTime @default(now())

  song      Song     @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([songId], map: "likes_songId_fkey")
  @@index([userId], map: "likes_userId_fkey")
  @@map("likes")
}

model Genre {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())

  songgenres songgenres[]

  @@map("genres")
}

model Mood {
  id        String      @id @default(uuid())
  name      String
  CreatedAt DateTime    @default(now())

  songmoods songmoods[]

  @@map("moods")
}

model History {
  id            String          @id @default(uuid())
  userId        String

  user          User            @relation(fields: [userId], references: [id])
  songhistories songhistories[]

  @@index([userId], map: "histories_userId_fkey")
  @@map("histories")
}

model artistsongs {
  id        String   @id
  artistId  String
  songId    String
  createdAt DateTime @default(now())

  artists   Artist   @relation(fields: [artistId], references: [id], map: "artistSongs_artistId_fkey")
  songs     Song     @relation(fields: [songId], references: [id], map: "artistSongs_songId_fkey")

  @@index([artistId], map: "artistSongs_artistId_fkey")
  @@index([songId], map: "artistSongs_songId_fkey")
}

model playlistsongs {
  id         String   @id
  playlistId String
  songId     String
  CreatedAt  DateTime @default(now())

  playlists  Playlist @relation(fields: [playlistId], references: [id], map: "playlistSongs_playlistId_fkey")
  songs      Song     @relation(fields: [songId], references: [id], map: "playlistSongs_songId_fkey")

  @@index([playlistId], map: "playlistSongs_playlistId_fkey")
  @@index([songId], map: "playlistSongs_songId_fkey")
}

model songgenres {
  id        String   @id
  songId    String
  genreId   String
  CreatedAt DateTime @default(now())

  genres    Genre    @relation(fields: [genreId], references: [id], map: "songGenres_genreId_fkey")
  songs     Song     @relation(fields: [songId], references: [id], map: "songGenres_songId_fkey")

  @@index([genreId], map: "songGenres_genreId_fkey")
  @@index([songId], map: "songGenres_songId_fkey")
}

model songhistories {
  id        String   @id
  songId    String
  historyId String
  createdAt DateTime @default(now())

  histories History  @relation(fields: [historyId], references: [id], map: "songHistories_historyId_fkey")
  songs     Song     @relation(fields: [songId], references: [id], map: "songHistories_songId_fkey")

  @@index([historyId], map: "songHistories_historyId_fkey")
  @@index([songId], map: "songHistories_songId_fkey")
}

model songmoods {
  id        String   @id
  moodId    String
  songId    String
  createdAt DateTime @default(now())

  moods     Mood     @relation(fields: [moodId], references: [id], map: "songMoods_moodId_fkey")
  songs     Song     @relation(fields: [songId], references: [id], map: "songMoods_songId_fkey")

  @@index([moodId], map: "songMoods_moodId_fkey")
  @@index([songId], map: "songMoods_songId_fkey")
}

model useralbums {
  id        String   @id
  userId    String
  albumId   String
  createdAt DateTime @default(now())

  albums    Album    @relation(fields: [albumId], references: [id], map: "userAlbums_albumId_fkey")
  users     User     @relation(fields: [userId], references: [id], map: "userAlbums_userId_fkey")

  @@index([albumId], map: "userAlbums_albumId_fkey")
  @@index([userId], map: "userAlbums_userId_fkey")
}

model userplaylists {
  id         String   @id
  userId     String
  playlistId String
  CreatedAt  DateTime @default(now())
  
  playlists  Playlist @relation(fields: [playlistId], references: [id], map: "userPlaylists_playlistId_fkey")
  users      User     @relation(fields: [userId], references: [id], map: "userPlaylists_userId_fkey")

  @@index([playlistId], map: "userPlaylists_playlistId_fkey")
  @@index([userId], map: "userPlaylists_userId_fkey")
}
